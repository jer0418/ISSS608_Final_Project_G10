{
  "hash": "2b10dbe02b370540718bf80c97dd5f77",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Exercise 3\"\nauthor: \"Jeounghyun Kim\"\ndate: \"March 29, 2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Thailand Road Accidents: Visual Exploration and Predictive Modeling\n\n## 1. Overview\n\nThis project focuses on analyzing road accident data in Thailand from 2019 to 2022. With thousands of incidents recorded across various provinces, weather conditions, vehicle types, and times of day, the goal is to gain meaningful insights into when and where fatal accidents are more likely to occur.\n\nThe analysis combines exploratory visualizations with a predictive model to understand patterns and estimate the number of fatalities under different accident scenarios. A final prototype in the form of a Shiny app was developed to allow interactive simulations of fatality risk.\n\n## 2. Objective\n\nThe main objective of this exercise is to build a standalone predictive module that takes user input — such as location, time, weather, and vehicle type — and returns an estimate of the expected number of fatalities using Poisson regression.\n\nIn addition, the project aims to:\n\n-   Explore temporal and regional patterns of accidents using visual analytics\n\n-   Identify high-risk vehicle types and conditions\n\n-   Develop a user-friendly interface to simulate and visualize fatality predictions\n\n## 3. Data Preparation\n\nUsed the following R packages in this project and loaded them using the `pacman::p_load()` function for convenience:\n\n-   **shiny**: For building interactive web applications.\n\n-   **tidyverse**: A collection of packages for data wrangling and visualization, including `dplyr`, `ggplot2`, and `readr`.\n\n-   **leaflet**: To build interactive geospatial heatmaps for province-level accident data.\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n### 3.2 Data Source\n\nThe dataset was originally collected from [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022/data), which compiles official accident data released by Thai government agencies. It contains accident records between 2019 and 2022, including variables such as:\n\n-   `province_en`: Province where the accident occurred\n\n<!-- -->\n\n-   `vehicle_type`: Type of vehicle involved\n\n-   `weather_condition`: Weather at the time of the accident\n\n-   `incident_datetime`: Timestamp of the incident\n\n-   `number_of_vehicles_involved`: Total number of vehicles\n\n-   `number_of_fatalities`: Fatalities resulting from the accident\n\n### 3.3 Data Overview & Pre-processing\n\n#### 3.3.1Import Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_data <- read_csv(\"data/thai_road_accident_2019_2022.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\n#### 3.3.2 Data Overview\n\nThis output from `glimpse(accident_data)` provides a summary of the dataset’s structure, offering an overview of the number of rows, columns, and the types of variables included.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(accident_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 81,735\nColumns: 18\n$ acc_code                    <dbl> 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           <date> 2019-01-01, 2019-01-01, 2019-01-01, 2019-…\n$ report_datetime             <date> 2019-01-02, 2020-02-20, 2019-01-01, 2019-…\n$ province_th                 <chr> \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 <chr> \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              <chr> \"driving under the influence of alcohol\", …\n$ accident_type               <chr> \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          <dbl> 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    <dbl> 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   <dbl> 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            <chr> \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"slope area\", \"no …\n```\n\n\n:::\n:::\n\n\n\n### 3.2 Pre-processing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_data <- read_csv(\"data/thai_road_accident_2019_2022.csv\", show_col_types = FALSE) %>%\n  mutate(\n    incident_datetime = as.POSIXct(incident_datetime),\n    day_of_week = weekdays(incident_datetime),\n    hour = as.integer(format(incident_datetime, \"%H\"))\n  ) %>%\n  drop_na(number_of_fatalities, province_en, vehicle_type,\n          weather_condition, number_of_vehicles_involved,\n          day_of_week, hour) %>%\n  mutate(\n    province_en = factor(province_en),\n    vehicle_type = factor(vehicle_type),\n    weather_condition = factor(weather_condition),\n    day_of_week = factor(day_of_week)\n  )\n```\n:::\n\n\n\nI converted the timestamp to POSIXct format and extracted `day_of_week` and `hour` for temporal analysis. Then, I removed rows with missing values in key variables and converted categorical fields to factors for modeling compatibility.\n\n## 4. Thailand Road Accidents: Visual Exploration and Predictive Modeling\n\n### 4.1 Heatmap of Average Fatalities by Province\n\nTo explore the geographic distribution of road accident severity, I created a heatmap that visualizes the average number of fatalities per province in Thailand. This visualization helps highlight provinces with higher fatality rates, allowing for better understanding of regional accident patterns.\n\nThe heatmap was built using the `leaflet` package. Provinces are represented by circular markers, where:\n\n-   **Radius** indicates the magnitude of average fatalities (larger circle = higher fatality).\n\n-   **Color intensity** (from light to dark red) represents the severity.\n\n-   **Interactive popups** provide province names and average fatality values.\n\n#### 4.1.1 Step 1: Prepare Summary Data with Coordinates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calculate average fatalities per province\nprovince_summary <- accident_data %>%\n  group_by(province_en) %>%\n  summarise(\n    avg_fatalities = mean(number_of_fatalities),\n    .groups = \"drop\"\n  ) %>%\n  # Add lat/lon for each province\n  mutate(\n    lat = case_when(\n      province_en == \"Bangkok\" ~ 13.7563,\n      province_en == \"Chiang Mai\" ~ 18.7883,\n      province_en == \"Phuket\" ~ 7.8804,\n      province_en == \"Udon Thani\" ~ 17.4138,\n      province_en == \"Khon Kaen\" ~ 16.4419,\n      province_en == \"Nakhon Ratchasima\" ~ 14.9799,\n      province_en == \"Chon Buri\" ~ 13.3611,\n      province_en == \"Songkhla\" ~ 7.1897,\n      TRUE ~ NA_real_\n    ),\n    lon = case_when(\n      province_en == \"Bangkok\" ~ 100.5018,\n      province_en == \"Chiang Mai\" ~ 98.9853,\n      province_en == \"Phuket\" ~ 98.3923,\n      province_en == \"Udon Thani\" ~ 102.7859,\n      province_en == \"Khon Kaen\" ~ 102.8350,\n      province_en == \"Nakhon Ratchasima\" ~ 102.0977,\n      province_en == \"Chon Buri\" ~ 100.9847,\n      province_en == \"Songkhla\" ~ 100.5954,\n      TRUE ~ NA_real_\n    )\n  ) %>%\n  drop_na(lat, lon) \n```\n:::\n\n\n\nIn this step, I calculated the mean number of fatalities per province and manually assigned latitude and longitude values for selected provinces. This allowed accurate placement of markers on the map.\n\n#### 4.1.2 Step 2: Create Interactive Heatmap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npal <- colorNumeric(\n  palette = \"Reds\",\n  domain = province_summary$avg_fatalities\n)\n\n# visualization\nleaflet(province_summary) %>%\n  addTiles() %>%\n  addCircleMarkers(\n    ~lon, ~lat,\n    radius = ~sqrt(avg_fatalities) * 50,\n    color = ~pal(avg_fatalities),\n    stroke = FALSE,\n    fillOpacity = 0.8,\n    popup = ~paste0(\n      \"<strong>\", province_en, \"</strong><br>\",\n      \"Avg Fatalities: \", round(avg_fatalities, 2)\n    )\n  ) %>%\n  addLegend(\n    \"bottomright\",\n    pal = pal,\n    values = ~avg_fatalities,\n    title = \"Avg Fatalities\",\n    opacity = 1\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-66eae1074c876f7fea93\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-66eae1074c876f7fea93\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[13.7563,18.7883,13.3611,16.4419,14.9799,7.8804,7.1897,17.4138],[100.5018,98.9853,100.9847,102.835,102.0977,98.39230000000001,100.5954,102.7859],[7.022029542614037,15.60820567944458,10.70908334169725,23.35258309598538,18.48219661164742,14.43375672974064,18.90589805632103,25.95939258582425],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":false,\"color\":[\"#FFF5F0\",\"#FDA78A\",\"#FEE3D7\",\"#BD151A\",\"#FC7554\",\"#FCBA9F\",\"#FB6C4C\",\"#67000D\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"#FFF5F0\",\"#FDA78A\",\"#FEE3D7\",\"#BD151A\",\"#FC7554\",\"#FCBA9F\",\"#FB6C4C\",\"#67000D\"],\"fillOpacity\":0.8},null,null,[\"<strong>Bangkok<\\/strong><br>Avg Fatalities: 0.02\",\"<strong>Chiang Mai<\\/strong><br>Avg Fatalities: 0.1\",\"<strong>Chon Buri<\\/strong><br>Avg Fatalities: 0.05\",\"<strong>Khon Kaen<\\/strong><br>Avg Fatalities: 0.22\",\"<strong>Nakhon Ratchasima<\\/strong><br>Avg Fatalities: 0.14\",\"<strong>Phuket<\\/strong><br>Avg Fatalities: 0.08\",\"<strong>Songkhla<\\/strong><br>Avg Fatalities: 0.14\",\"<strong>Udon Thani<\\/strong><br>Avg Fatalities: 0.27\"],null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#FFF5F0 , #FEE1D3 12.1186973609593%, #FDA486 32.1321090837645%, #F96345 52.1455208065696%, #D32120 72.1589325293747%, #8D0812 92.1723442521798%, #67000D \"],\"labels\":[\"0.05\",\"0.10\",\"0.15\",\"0.20\",\"0.25\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":1,\"position\":\"bottomright\",\"type\":\"numeric\",\"title\":\"Avg Fatalities\",\"extra\":{\"p_1\":0.1211869736095934,\"p_n\":0.9217234425217984},\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"limits\":{\"lat\":[7.1897,18.7883],\"lng\":[98.39230000000001,102.835]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### 4.2 Average Fatalities by Day of Week\n\nTo verify potential temporal patterns in road fatalities, I plotted the average fatalities by day of the week. The graph shows if weekends or weekdays are more prone to fatal accidents. \\\n\\\nThe chart below shows that Sunday and Saturday have relatively higher average fatalities, which suggests heightened danger during weekends—likely due to higher traffic volume or longer travel distance during leisure times.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_data <- accident_data %>%\n  mutate(\n    incident_datetime = as.POSIXct(incident_datetime),\n    day_of_week = weekdays(incident_datetime),\n    hour = as.integer(format(incident_datetime, \"%H\"))\n  ) %>%\n  drop_na(number_of_fatalities, province_en, vehicle_type,\n          weather_condition, number_of_vehicles_involved,\n          day_of_week, hour)\n\n#Average Fatalities by Day of Week\naccident_data %>%\n  group_by(day_of_week) %>%\n  summarise(avg_fatalities = mean(number_of_fatalities), .groups = \"drop\") %>%\n  ggplot(aes(x = day_of_week, y = avg_fatalities, fill = day_of_week)) +\n  geom_col(width = 0.7, show.legend = FALSE) +\n  labs(title = \"Average Fatalities by Day of Week\",\n       x = \"Day of Week\", y = \"Average Fatalities\") +\n  theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](Predictive_Analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### 4.3 Average Fatalities by Hour and Day\n\nThis line plot shows how the average number of fatalities varies throughout the day for each day of the week. By incorporating both dayof week and hour of day, the graph shows temporal patterns that canbe linked to traffic volume, human activity, or enforcement time of regulations.\n\nWe can observe two main peaks in the evening (around 18:00 to 21:00), especially on weekends, which may reflect higher accident risk due to increased social activity or tiredness. Early morning hours also show relatively higher fatalities on certain days.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_data %>%\n  group_by(day_of_week, hour) %>%\n  summarise(avg_fatalities = mean(number_of_fatalities), .groups = \"drop\") %>%\n  ggplot(aes(x = hour, y = avg_fatalities, color = day_of_week)) +\n  geom_line(size = 1) +\n  labs(\n    title = \"Average Fatalities by Hour and Day\",\n    x = \"Hour of Day\",\n    y = \"Average Fatalities\"\n  ) +\n  theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](Predictive_Analysis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### 4.4 Average Fatalities by Road User Type\n\nThis chart shows the average number of fatalities per crash by roaduser type. By examining which groups have more fatalities, we can determine vulnerable road user groups and direct safety measures.\n\nThe following bar chart shows the top 10 vehicle types (including pedestrians) with the highest average fatalities. Notably, pedestrians and bicycle crashes are among the most fatal on average.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_data %>%\n  group_by(vehicle_type) %>%\n  summarise(avg_fatalities = mean(number_of_fatalities), .groups = \"drop\") %>%\n  slice_max(avg_fatalities, n = 10) %>%  # Select top 10 for better readability\n  ggplot(aes(x = reorder(vehicle_type, avg_fatalities), y = avg_fatalities, fill = vehicle_type)) +\n  geom_col(width = 0.7, show.legend = FALSE) +\n  coord_flip() +\n  labs(\n    title = \"Average Fatalities by Road User Type\",\n    x = \"Vehicle Type\",\n    y = \"Average Fatalities\"\n  ) +\n  theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](Predictive_Analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### 4.5 Predictive Modeling using Poisson Regression\n\nThis part builds a predictive model based on Poisson regressionsuitable for count target variables like the number of fatalities. It trains the model on significant accident variables to estimate expected fatalities in a given situation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dataset and preprocess\naccident_data <- read_csv(\"data/thai_road_accident_2019_2022.csv\", show_col_types = FALSE) %>%\n  mutate(\n    incident_datetime = as.POSIXct(incident_datetime),\n    day_of_week = weekdays(incident_datetime),\n    hour = as.integer(format(incident_datetime, \"%H\"))\n  ) %>%\n  drop_na(number_of_fatalities, province_en, vehicle_type,\n          weather_condition, number_of_vehicles_involved,\n          day_of_week, hour) %>%\n  mutate(\n    province_en = factor(province_en),\n    vehicle_type = factor(vehicle_type),\n    weather_condition = factor(weather_condition),\n    day_of_week = factor(day_of_week)\n  )\n```\n:::\n\n\n\n#### 4.5.1 Train Model\n\nTo estimate the number of fatalities, I trained a Poisson regression model using the `glm()` function. The target variable is `number_of_fatalities`, and the predictors include location, vehicle type, weather, time, and number of vehicles involved.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- glm(number_of_fatalities ~ province_en + vehicle_type +\n               weather_condition + day_of_week + hour + number_of_vehicles_involved,\n             family = poisson(), data = accident_data)\n```\n:::\n\n\n\n#### 4.5.2 Scenario Prediction and Interpretation\n\nA hypothetical accident scenario is created using the following values:\n\n-   Province: Bangkok\n\n-   Vehicle Type: Private/Passenger Car\n\n-   Weather: Clear\n\n-   Day: Monday\n\n-   Hour: 14\n\n-   Number of Vehicles Involved: 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdata <- data.frame(\n  province_en = factor(\"Bangkok\", levels = levels(accident_data$province_en)),\n  vehicle_type = factor(\"private/passenger car\", levels = levels(accident_data$vehicle_type)),\n  weather_condition = factor(\"clear\", levels = levels(accident_data$weather_condition)),\n  day_of_week = factor(\"Monday\", levels = levels(accident_data$day_of_week)),\n  hour = 14,\n  number_of_vehicles_involved = 2\n)\n\npred <- predict(model, newdata = newdata, type = \"response\")\navg_pred <- mean(predict(model, type = \"response\"), na.rm = TRUE)\n\ncomparison <- ifelse(pred > avg_pred, \"higher than\", \"lower than\")\nsummary_text <- paste0(\"Predicted: \", round(pred, 3),\n                       \" (\", comparison, \" avg: \", round(avg_pred, 3), \")\")\nsummary_text\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Predicted: 0.017 (lower than avg: 0.146)\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nThe model returns an estimated fatality count for the defined scenario and compares it with the overall average. The result allows the user to understand whether this scenario poses a higher or lower risk compared to typical cases.\n:::\n\n#### 4.5.3 Visualizing the Prediction\n\nThe chart below compares the predicted value for the given scenario against the overall average:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbar_data <- tibble(\n  Scenario = c(\"This Scenario\", \"Overall Avg\"),\n  Value = c(pred, avg_pred)\n)\n\nggplot(bar_data, aes(x = Scenario, y = Value, fill = Scenario)) +\n  geom_col(width = 0.5) +\n  labs(title = \"Fatality Prediction vs Overall Average\",\n       y = \"Estimated Fatalities\", x = NULL) +\n  theme_minimal(base_size = 14) +\n  scale_fill_manual(values = c(\"This Scenario\" = \"firebrick\", \"Overall Avg\" = \"gray\")) +\n  ylim(0, max(1, pred, avg_pred) * 1.2)\n```\n\n::: {.cell-output-display}\n![](Predictive_Analysis_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe model estimates approximately 0.017 fatalities for this situation, which is lower than the overall average of 0.146 across all accidents.\n\nThis suggests that the specified conditions (time, location, weather, and vehicle type) are relatively less severe compared to other combinations observed in the dataset. It demonstrates the model’s capability to provide data-driven risk estimation under customized inputs.\n\n## 5. Key Takeaways\n\n-   Predictive model provides interpretable results based on user input\n\n-   Visual context improves understanding of scenario-based risks\n\n-   Shiny allows for fast prototyping and feedback-driven development\n\n## 6. Future Work\n\n-   Integrate module into full team project\n\n-   Extend model to include severity levels or accident types\n\n-   Refine geospatial accuracy for heatmap with real coordinates\n\n## 7. Prototype Design (Shiny App – Predictive Analysis Module)\n\nThis Shiny application provides an interactive interface for users to estimate the expected number of fatalities under different traffic accident scenarios using a trained Poisson regression model.\n\nThe following R packages from CRAN are required to build and run this Shiny application module:\n\n-   **shiny**: For building the interactive web application\n-   **tidyverse**: A collection of packages used for data manipulation and visualization, including `dplyr`, `ggplot2`, and `readr`\n\nAll packages are supported by CRAN and can be installed via:\n\n::: callout-note\ninstall.packages(c(\"shiny\", \"tidyverse\"))\n:::\n\n#### **Inputs**\n\n-   Province\n\n-   Vehicle Type\n\n-   Weather Condition\n\n-   Day of Week\n\n-   Hour\n\n-   Number of Vehicles Involved\n\n#### **Outputs**\n\n-   Predicted fatality count\n\n-   Risk summary text (relative to overall average)\n\n-   Bar chart: predicted value vs. overall average\n\n![](images/clipboard-1426362403.png)\n\n## 8. Appendix\n\n-   **Reference Dashboards and Storyboards**\n\n    -   [Storyboard Example – Airline Stock Market Analysis](https://giniceseah.netlify.app/posts/2021-07-31-storyboard/)\n\n    -   [Predictive Modeling – Road Accidents in Tanzania](https://habaritanzania.netlify.app/analysis/decision_tree)\n\n    -   [ISSS608 Visual Analytics Project Gallery (AY2024/25 Jan)](https://isss608-ay2024-25jan.netlify.app/vaproject)\n",
    "supporting": [
      "Predictive_Analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}